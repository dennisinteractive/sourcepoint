<?php
/**
 * @file
 * Main module file forSourcepoint DFP.
 */

/**
 * Implements hook_form_alter().
 */
function sourcepoint_dfp_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['plugin']['schema']) && $form_state['plugin']['schema'] = 'dfp_tags') {

    $tag = ($form_state['op'] == 'add' ? $form_state['item'] : $form_state['item']->raw);

    $form['sourcepoint_dfp'] = array(
      '#type' => 'fieldset',
      '#title' => t('Sourcepoint'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'settings',
    );
    // Need to pass the machine name because dfp doesn't do it.
    $form['sourcepoint_dfp']['sourcepoint_slot_name'] = array(
      '#type' => 'hidden',
      '#value' => $tag->machinename,
    );
    // Get array of slots recovery.
    $settings = variable_get('sourcepoint_dfp_slots_recovery', []);
    $form['sourcepoint_dfp']['sourcepoint_recovery'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable recovery'),
      '#description' => t('Enable recovery for this ad tag'),
      '#default_value' => isset($settings[$tag->machinename]) ? $settings[$tag->machinename] : '0',
    );

    $form['#submit'][] = '_sourcepoint_dfp_tag_form_submit';
  }
}

/**
 * Form callback for DFP ad tag UI.
 *
 * @param $form
 * @param $form_state
 */
function _sourcepoint_dfp_tag_form_submit(&$form, &$form_state) {
  if (isset($form_state['input']['sourcepoint_slot_name'])) {
    // Get the slot name.
    $slot_name = $form_state['input']['sourcepoint_slot_name'];
    // Get array of slots recovery.
    $settings = variable_get('sourcepoint_dfp_slots_recovery', []);
    // Update settings.
    $settings[$slot_name] = isset($form_state['input']['sourcepoint_recovery'])
      ? $form_state['input']['sourcepoint_recovery']
      : '0';
    variable_set('sourcepoint_dfp_slots_recovery', $settings);
  }
}

/**
 * Implements hook_page_build().
 */
function sourcepoint_dfp_page_build() {

  if (path_is_admin(current_path())) {
    return;
  }

  if (!variable_get('sourcepoint_enabled', 1)) {
    return;
  }

  $script = "";
  $script .= "document.addEventListener('sp.blocking', function (e) {";
  $script .= "if (gptLoadComplete === true && attemptedRecovery === false) {";
  $script .= "attemptedRecovery = true;";
  $script .= "var slots = window.googletag.slots;";
  $script .= "window.googletag = {};";
  $script .= "window.googletag.cmd = [];";
  $script .= "window.googletag.slots = slots;";
  $script .= "var scriptsArray = ['console.log(\'Firing Tags\');'];";
  $script .= "[].slice.call(document.querySelectorAll('script[data-dfp]')).forEach(function(s) {";
  $script .= "scriptsArray.push(s.innerText.replace('<!--//--><![CDATA[//><!--', '').replace('//--><!]]>', ''));";
  $script .= "});";
  $script .= "var newScripts = scriptsArray.join(';');";
  $script .= "var scriptEl = document.createElement('script');";
  $script .= "scriptEl.id = 'soucePointAds';";
  $script .= "scriptEl.innerHTML = newScripts;";
  $script .= "document.head.appendChild(scriptEl);";
  $script .= "window._sp_.dfp.loadGPT();";
  $script .= "}";
  $script .= "});";
  $script .= "document.addEventListener('sp.not_blocking', function (e) {";
  $script .= "});";

  $element = array(
    '#tag' => 'script',
    '#weight' => 1100,
    '#value' => $script,
    '#attributes' => array(
      'type' => 'text/javascript',
    ),
  );
  drupal_add_html_head($element, 'sourcepoint_dfp');
}

function sourcepoint_dfp_theme_registry_alter(&$theme_registry) {
  $theme_registry['dfp_tag']['template'] = drupal_get_path('module', 'sourcepoint_dfp') . '/theme/dfp_tag__sourcepoint';
}

/**
 * Implements hook_preprocess_html_tag().
 */
function sourcepoint_dfp_preprocess_html_tag(&$vars) {
  $element = &$vars['element'];
  if (isset($element['#value']) && strpos($element['#value'], 'googletag.cmd.push') !== FALSE) {
    $settings = variable_get('sourcepoint_dfp_slots_recovery', []);
    foreach ($settings as $tag_name => $enabled) {
      if ($enabled && strpos($element['#value'], 'googletag.slots["' . $tag_name . '"]')) {
        $element['#attributes']['data-dfp'] = 'data-dfp';
        break;
      }
    }
  }
}

/**
 * Implements hook_preprocess_dfp_tag().
 */
function sourcepoint_dfp_preprocess_dfp_tag(&$vars) {
  $vars['sourcepoint_attributes'] = [];
  $settings = variable_get('sourcepoint_dfp_slots_recovery', []);
  foreach ($settings as $tag_name => $enabled) {
    if ($enabled && $vars['tag']->machinename == $tag_name) {
      $vars['theme_hook_suggestions'][] = 'dfp_tag__sourcepoint';
      $vars['sourcepoint_attributes']['data-dfp'] = ['data-dfp'];
      break;
    }
  }
}

<?php
/**
 * @file
 * Main module file forSourcepoint DFP.
 */

/**
 * Implements hook_form_alter().
 */
function sourcepoint_dfp_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['plugin']['schema']) && $form_state['plugin']['schema'] = 'dfp_tags') {

    $tag = ($form_state['op'] == 'add' ? $form_state['item'] : $form_state['item']->raw);

    $form['sourcepoint_dfp'] = array(
      '#type' => 'fieldset',
      '#title' => t('Sourcepoint'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'settings',
    );
    // Need to pass the machine name because dfp doesn't do it.
    $form['sourcepoint_dfp']['sourcepoint_slot_name'] = array(
      '#type' => 'hidden',
      '#value' => $tag->machinename,
    );
    // Get array of slots recovery.
    $settings = variable_get('sourcepoint_dfp_slots_recovery', []);
    $form['sourcepoint_dfp']['sourcepoint_recovery'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable recovery'),
      '#description' => t('Enable recovery for this ad tag'),
      '#default_value' => isset($settings[$tag->machinename]) ? $settings[$tag->machinename] : '0',
    );

    $form['#submit'][] = '_sourcepoint_dfp_tag_form_submit';
  }
}

/**
 * Implements hook_form_alter().
 */
function sourcepoint_dfp_form_sourcepoint_admin_settings_form_alter(&$form, &$form_state, $form_id) {

  $form['sourcepoint_dfp'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sourcepoint DFP'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'settings',
  );
  $form['sourcepoint_dfp']['sourcepoint_dfp_data_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Data name'),
    '#size' => 10,
    '#description' => t('The name of the data attribute to be added to the script tags.'),
    '#default_value' => variable_get('sourcepoint_dfp_data_name', 'data-dfp'),
  );

  $form['#submit'][] = '_sourcepoint_dfp_tag_form_submit';

}

/**
 * Form callback for DFP ad tag UI.
 *
 * @param $form
 * @param $form_state
 */
function _sourcepoint_dfp_tag_form_submit(&$form, &$form_state) {
  if (isset($form_state['input']['sourcepoint_slot_name'])) {
    // Get the slot name.
    $slot_name = $form_state['input']['sourcepoint_slot_name'];
    // Get array of slots recovery.
    $settings = variable_get('sourcepoint_dfp_slots_recovery', []);
    // Update settings.
    $settings[$slot_name] = isset($form_state['input']['sourcepoint_recovery'])
      ? $form_state['input']['sourcepoint_recovery']
      : '0';
    variable_set('sourcepoint_dfp_slots_recovery', $settings);
  }
  if (isset($form_state['input']['sourcepoint_dfp_data_name'])) {
    variable_set('sourcepoint_dfp_data_name', $form_state['input']['sourcepoint_dfp_data_name']);
  }
}

/**
 * Implements hook_page_build().
 */
function sourcepoint_dfp_page_build() {

  if (path_is_admin(current_path())) {
    return;
  }

  if (!variable_get('sourcepoint_enabled', 1)) {
    return;
  }

  $data_name = variable_get('sourcepoint_dfp_data_name', 'data-dfp');

  $script = "";

  // Blocking event.
  // Re-initialize GPT on blocking event.
  $script .= "document.addEventListener('sp.blocking', function (e) { isBlocking = true; spInitSlots(); });";

  // Not blocking event.
  $script .= "document.addEventListener('sp.not_blocking', function (e) {});";

  // Function to re-initialize GPT.
  $script .= "function spInitSlots() {";
  $script .= "if (gptLoadComplete === true && attemptedRecovery === false && isBlocking === true) {";
  $script .= "attemptedRecovery = true;";
  $script .= "var slots = window.googletag.slots;";
  $script .= "window.googletag = {};";
  $script .= "window.googletag.cmd = [];";
  $script .= "window.googletag.slots = slots;";
  $script .= "var scriptsArray = [];";
  $script .= "googletag.cmd.push(function () {googletag.destroySlots(); window.googletag.slots = window.slots;});";
  $script .= "[].slice.call(document.querySelectorAll('script[$data_name]')).forEach(function(s) {";
  $script .= "scriptsArray.push(s.innerText.replace('<!--//--><![CDATA[//><!--', '').replace('//--><!]]>', ''));";
  $script .= "});";
  $script .= "var newScripts = scriptsArray.join(';');";
  $script .= "var scriptEl = document.createElement('script');";
  $script .= "scriptEl.id = 'soucePointAds';";
  $script .= "scriptEl.innerHTML = newScripts;";
  $script .= "document.head.appendChild(scriptEl);";
  $script .= "window._sp_.dfp.loadGPT();";
  $script .= "}";
  $script .= "}";

  $element = array(
    '#tag' => 'script',
    '#weight' => 1015,
    '#value' => $script,
    '#attributes' => array(
      'type' => 'text/javascript',
    ),
  );
  drupal_add_html_head($element, 'sourcepoint_dfp_deliver');
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return mixed
 */
function sourcepoint_dfp_theme($existing, $type, $theme, $path) {
  // Use default DFP theme when disabled.
  if (!variable_get('sourcepoint_enabled', 1)) {
    return array();
  }

  $theme_hooks = array();

  // Override dfp_theme() so that templates are found in this module instead.
  if ($dfp_theme_hooks = module_invoke('dfp', 'theme', $existing, $type, $theme, $path)) {
    if (isset($dfp_theme_hooks['dfp_tag'])) {
      $theme_hooks['dfp_tag'] = $dfp_theme_hooks['dfp_tag'];
    }
  }

  return $theme_hooks;
}

/**
 * Implements hook_preprocess_html_tag().
 */
function sourcepoint_dfp_preprocess_html_tag(&$vars) {
  if (!variable_get('sourcepoint_enabled', 1)) {
    return;
  }

  $element = &$vars['element'];

  // Add recovery attributes.
  if (isset($element['#value']) && strpos($element['#value'], 'googletag.cmd.push') !== FALSE) {
    // Get configured data attribute name.
    $data_name = variable_get('sourcepoint_dfp_data_name', 'data-dfp');

    // Add recovery attribute to ad tags enabled for recovery.
    $settings = variable_get('sourcepoint_dfp_slots_recovery', []);
    foreach ($settings as $tag_name => $enabled) {
      if ($enabled && _sourcepoint_dfp_is_tag_js($element['#value'], $tag_name)) {
        $element['#attributes'][$data_name] = $data_name;
        break;
      }
    }
    // Add recovery attribute to global config.
    if (strpos($element['#value'], 'googletag.enableServices()')) {
      $element['#attributes'][$data_name] = $data_name;
    }
  }

  if (isset($element['#value']) && strpos($element['#value'], 'gads.src') > 0) {
    // Prepend with flags.
    $element['#value'] = "var attemptedRecovery = false, gptLoadComplete = false, isBlocking = false;" . $element['#value'];

    // Add onload callback to GPT.
    $script = "gads.onload = gads.onerror = function () {";
    $script .= "gptLoadComplete = true;";
    $script .= "spInitSlots();";
    $script .= "};";
    $script .= 'gads.src';
    $element['#value'] = str_replace('gads.src', $script, $element['#value']);
  }
}

/**
 * Helper to check if provided JS belongs to provided tag.
 *
 * @param $js
 * @param $tag_name
 * @return bool
 */
function _sourcepoint_dfp_is_tag_js($js, $tag_name) {
  if (strpos($js, 'googletag.slots["' . $tag_name . '"]')) {
    return TRUE;
  }
  if (strpos($js, 'googletag.slots.' . $tag_name)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_preprocess_dfp_tag().
 */
function sourcepoint_dfp_preprocess_dfp_tag(&$vars) {
  if (!variable_get('sourcepoint_enabled', 1)) {
    // Set empty attributes to prevent any errors on templates expecting them.
    $vars['sourcepoint_attributes'] = array();
    return;
  }

  $vars['sourcepoint_attributes'] = [];
  $settings = variable_get('sourcepoint_dfp_slots_recovery', []);
  foreach ($settings as $tag_name => $enabled) {
    if ($enabled && $vars['tag']->machinename == $tag_name) {
      $data_name = variable_get('sourcepoint_dfp_data_name', 'data-dfp');
      $vars['sourcepoint_attributes'][$data_name] = $data_name;
      break;
    }
  }
}

/**
 * Implements hook_sourcepoint_js_config_alter().
 */
function sourcepoint_dfp_sourcepoint_js_config_alter(&$config) {
  $config['gpt_auto_load'] = 'false';
}

/**
 * Implements hook_sourcepoint_ad_servers().
 */
function sourcepoint_dfp_sourcepoint_ad_servers() {
  return array(
    'dfp' => t('DFP'),
  );
}
